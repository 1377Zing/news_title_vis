{
  "version": 3,
  "sources": ["../../../../node_modules/echarts-wordcloud/src/WordCloudSeries.js", "../../../../node_modules/echarts-wordcloud/src/WordCloudView.js", "../../../../node_modules/echarts-wordcloud/src/layout.js", "../../../../node_modules/echarts-wordcloud/src/wordCloud.js", "../../../../node_modules/echarts-wordcloud/index.js", "dep:echarts-wordcloud"],
  "sourcesContent": ["var completeDimensions = require('echarts/lib/data/helper/completeDimensions');\nvar echarts = require('echarts/lib/echarts');\n\necharts.extendSeriesModel({\n\n    type: 'series.wordCloud',\n\n    visualColorAccessPath: 'textStyle.normal.color',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = completeDimensions(['value'], option.data);\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    // Most of options are from https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md\n    defaultOption: {\n\n        maskImage: null,\n\n        // Shape can be 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n        shape: 'circle',\n\n        left: 'center',\n\n        top: 'center',\n\n        width: '70%',\n\n        height: '80%',\n\n        sizeRange: [12, 60],\n\n        rotationRange: [-90, 90],\n\n        rotationStep: 45,\n\n        gridSize: 8,\n\n        drawOutOfBound: false,\n\n        textStyle: {\n            normal: {\n                fontWeight: 'normal'\n            }\n        }\n    }\n});\n", "var echarts = require('echarts/lib/echarts');\n\nfunction getShallow(model, path) {\n    return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n\n    type: 'wordCloud',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var gridSize = seriesModel.get('gridSize');\n\n        seriesModel.layoutInstance.ondraw = function (text, size, dataIdx, drawn) {\n            var itemModel = data.getItemModel(dataIdx);\n            var textStyleModel = itemModel.getModel('textStyle.normal');\n            var emphasisTextStyleModel = itemModel.getModel('textStyle.emphasis');\n\n            var textEl = new echarts.graphic.Text({\n                style: echarts.graphic.setTextStyle({}, textStyleModel, {\n                    x: drawn.info.fillTextOffsetX,\n                    y: drawn.info.fillTextOffsetY + size * 0.5,\n                    text: text,\n                    textBaseline: 'middle',\n                    textFill: data.getItemVisual(dataIdx, 'color'),\n                    fontSize: size\n                }),\n                scale: [1 / drawn.info.mu, 1 / drawn.info.mu],\n                position: [\n                    (drawn.gx + drawn.info.gw / 2) * gridSize,\n                    (drawn.gy + drawn.info.gh / 2) * gridSize\n                ],\n                rotation: drawn.rot\n            });\n\n            group.add(textEl);\n\n            data.setItemGraphicEl(dataIdx, textEl);\n\n            echarts.graphic.setHoverStyle(\n                textEl,\n                echarts.graphic.setTextStyle({}, emphasisTextStyleModel, null, {forMerge: true}, true)\n            );\n        };\n\n        this._model = seriesModel;\n    },\n\n    remove: function () {\n        this.group.removeAll();\n\n        this._model.layoutInstance.dispose();\n    },\n\n    dispose: function () {\n        this._model.layoutInstance.dispose();\n    }\n});\n", "/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return window.msSetImmediate ||\n    window.webkitSetImmediate ||\n    window.mozSetImmediate ||\n    window.oSetImmediate ||\n    (function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' ||\n            evt.data.substr(0, message.length) !== message/* ||\n            evt.source !== window */) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    })() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return window.msClearImmediate ||\n    window.webkitClearImmediate ||\n    window.mozClearImmediate ||\n    window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  })();\n}\n\n(function(global) {\n\n  // Check if WordCloud can run on this browser\n  var isSupported = (function isSupported() {\n    var canvas = document.createElement('canvas');\n    if (!canvas || !canvas.getContext) {\n      return false;\n    }\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx.getImageData) {\n      return false;\n    }\n    if (!ctx.fillText) {\n      return false;\n    }\n\n    if (!Array.prototype.some) {\n      return false;\n    }\n    if (!Array.prototype.push) {\n      return false;\n    }\n\n    return true;\n  }());\n\n  // Find out if the browser impose minium font size by\n  // drawing small texts on a canvas and measure it's width.\n  var minFontSize = (function getMinFontSize() {\n    if (!isSupported) {\n      return;\n    }\n\n    var ctx = document.createElement('canvas').getContext('2d');\n\n    // start from 20\n    var size = 20;\n\n    // two sizes to measure\n    var hanWidth, mWidth;\n\n    while (size) {\n      ctx.font = size.toString(10) + 'px sans-serif';\n      if ((ctx.measureText('\\uFF37').width === hanWidth) &&\n          (ctx.measureText('m').width) === mWidth) {\n        return (size + 1);\n      }\n\n      hanWidth = ctx.measureText('\\uFF37').width;\n      mWidth = ctx.measureText('m').width;\n\n      size--;\n    }\n\n    return 0;\n  })();\n\n  // Based on http://jsfromhell.com/array/shuffle\n  var shuffleArray = function shuffleArray(arr) {\n    for (var j, x, i = arr.length; i;\n      j = Math.floor(Math.random() * i),\n      x = arr[--i], arr[i] = arr[j],\n      arr[j] = x) {}\n    return arr;\n  };\n\n  var WordCloud = function WordCloud(elements, options) {\n    if (!isSupported) {\n      return;\n    }\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    elements.forEach(function(el, i) {\n      if (typeof el === 'string') {\n        elements[i] = document.getElementById(el);\n        if (!elements[i]) {\n          throw 'The element id specified is not found.';\n        }\n      } else if (!el.tagName && !el.appendChild) {\n        throw 'You must pass valid HTML elements, or ID of the element.';\n      }\n    });\n\n    /* Default values to be overwritten by options object */\n    var settings = {\n      list: [],\n      fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"\u5FAE\u8EDF\u6B63\u9ED1\u9AD4\", ' +\n                  '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n      fontWeight: 'normal',\n      color: 'random-dark',\n      minSize: 0, // 0 to disable\n      weightFactor: 1,\n      clearCanvas: true,\n      backgroundColor: '#fff',  // opaque white = rgba(255, 255, 255, 1)\n\n      gridSize: 8,\n      drawOutOfBound: false,\n      origin: null,\n\n      drawMask: false,\n      maskColor: 'rgba(255,0,0,0.3)',\n      maskGapWidth: 0.3,\n\n      wait: 0,\n      abortThreshold: 0, // disabled\n      abort: function noop() {},\n\n      minRotation: - Math.PI / 2,\n      maxRotation: Math.PI / 2,\n      rotationStep: 0.1,\n\n      shuffle: true,\n      rotateRatio: 0.1,\n\n      shape: 'circle',\n      ellipticity: 0.65,\n\n      classes: null,\n\n      hover: null,\n      click: null\n    };\n\n    if (options) {\n      for (var key in options) {\n        if (key in settings) {\n          settings[key] = options[key];\n        }\n      }\n    }\n\n    /* Convert weightFactor into a function */\n    if (typeof settings.weightFactor !== 'function') {\n      var factor = settings.weightFactor;\n      settings.weightFactor = function weightFactor(pt) {\n        return pt * factor; //in px\n      };\n    }\n\n    /* Convert shape into a function */\n    if (typeof settings.shape !== 'function') {\n      switch (settings.shape) {\n        case 'circle':\n        /* falls through */\n        default:\n          // 'circle' is the default and a shortcut in the code loop.\n          settings.shape = 'circle';\n          break;\n\n        case 'cardioid':\n          settings.shape = function shapeCardioid(theta) {\n            return 1 - Math.sin(theta);\n          };\n          break;\n\n        /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n        case 'diamond':\n        case 'square':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n          // +0+..+2*PI\n          settings.shape = function shapeSquare(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 4);\n            return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle-forward':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n          // %29%29%2C+t+%3D+0+..+2*PI\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle':\n        case 'triangle-upright':\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'pentagon':\n          settings.shape = function shapePentagon(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n            return 1 / (Math.cos(thetaPrime) +\n                        0.726543 * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'star':\n          settings.shape = function shapeStar(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n            if ((theta + 0.955) % (2 * Math.PI / 5) - (2 * Math.PI / 10) >= 0) {\n              return 1 / (Math.cos((2 * Math.PI / 10) - thetaPrime) +\n                          3.07768 * Math.sin((2 * Math.PI / 10) - thetaPrime));\n            } else {\n              return 1 / (Math.cos(thetaPrime) +\n                          3.07768 * Math.sin(thetaPrime));\n            }\n          };\n          break;\n      }\n    }\n\n    /* Make sure gridSize is a whole number and is not smaller than 4px */\n    settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n    /* shorthand */\n    var g = settings.gridSize;\n    var maskRectWidth = g - settings.maskGapWidth;\n\n    /* normalize rotation settings */\n    var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n    var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n    var rotationStep = settings.rotationStep;\n\n    /* information/object available to all functions, set when start() */\n    var grid, // 2d array containing filling information\n      ngx, ngy, // width and height of the grid\n      center, // position of the center of the cloud\n      maxRadius;\n\n    /* timestamp for measuring each putWord() action */\n    var escapeTime;\n\n    /* function for getting the color of the text */\n    var getTextColor;\n    function random_hsl_color(min, max) {\n      return 'hsl(' +\n        (Math.random() * 360).toFixed() + ',' +\n        (Math.random() * 30 + 70).toFixed() + '%,' +\n        (Math.random() * (max - min) + min).toFixed() + '%)';\n    }\n    switch (settings.color) {\n      case 'random-dark':\n        getTextColor = function getRandomDarkColor() {\n          return random_hsl_color(10, 50);\n        };\n        break;\n\n      case 'random-light':\n        getTextColor = function getRandomLightColor() {\n          return random_hsl_color(50, 90);\n        };\n        break;\n\n      default:\n        if (typeof settings.color === 'function') {\n          getTextColor = settings.color;\n        }\n        break;\n    }\n\n    /* function for getting the classes of the text */\n    var getTextClasses = null;\n    if (typeof settings.classes === 'function') {\n      getTextClasses = settings.classes;\n    }\n\n    /* Interactive */\n    var interactive = false;\n    var infoGrid = [];\n    var hovered;\n\n    var getInfoGridFromMouseTouchEvent =\n    function getInfoGridFromMouseTouchEvent(evt) {\n      var canvas = evt.currentTarget;\n      var rect = canvas.getBoundingClientRect();\n      var clientX;\n      var clientY;\n      /** Detect if touches are available */\n      if (evt.touches) {\n        clientX = evt.touches[0].clientX;\n        clientY = evt.touches[0].clientY;\n      } else {\n        clientX = evt.clientX;\n        clientY = evt.clientY;\n      }\n      var eventX = clientX - rect.left;\n      var eventY = clientY - rect.top;\n\n      var x = Math.floor(eventX * ((canvas.width / rect.width) || 1) / g);\n      var y = Math.floor(eventY * ((canvas.height / rect.height) || 1) / g);\n\n      return infoGrid[x][y];\n    };\n\n    var wordcloudhover = function wordcloudhover(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n\n      if (hovered === info) {\n        return;\n      }\n\n      hovered = info;\n      if (!info) {\n        settings.hover(undefined, undefined, evt);\n\n        return;\n      }\n\n      settings.hover(info.item, info.dimension, evt);\n\n    };\n\n    var wordcloudclick = function wordcloudclick(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n      if (!info) {\n        return;\n      }\n\n      settings.click(info.item, info.dimension, evt);\n      evt.preventDefault();\n    };\n\n    /* Get points on the grid for a given radius away from the center */\n    var pointsAtRadius = [];\n    var getPointsAtRadius = function getPointsAtRadius(radius) {\n      if (pointsAtRadius[radius]) {\n        return pointsAtRadius[radius];\n      }\n\n      // Look for these number of points on each radius\n      var T = radius * 8;\n\n      // Getting all the points at this radius\n      var t = T;\n      var points = [];\n\n      if (radius === 0) {\n        points.push([center[0], center[1], 0]);\n      }\n\n      while (t--) {\n        // distort the radius to put the cloud in shape\n        var rx = 1;\n        if (settings.shape !== 'circle') {\n          rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n        }\n\n        // Push [x, y, t]; t is used solely for getTextColor()\n        points.push([\n          center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI),\n          center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) *\n            settings.ellipticity,\n          t / T * 2 * Math.PI]);\n      }\n\n      pointsAtRadius[radius] = points;\n      return points;\n    };\n\n    /* Return true if we had spent too much time */\n    var exceedTime = function exceedTime() {\n      return ((settings.abortThreshold > 0) &&\n        ((new Date()).getTime() - escapeTime > settings.abortThreshold));\n    };\n\n    /* Get the deg of rotation according to settings, and luck. */\n    var getRotateDeg = function getRotateDeg() {\n      if (settings.rotateRatio === 0) {\n        return 0;\n      }\n\n      if (Math.random() > settings.rotateRatio) {\n        return 0;\n      }\n\n      if (rotationRange === 0) {\n        return minRotation;\n      }\n\n      return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n    };\n\n    var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n      // calculate the acutal font size\n      // fontSize === 0 means weightFactor function wants the text skipped,\n      // and size < minSize means we cannot draw the text.\n      var debug = false;\n      var fontSize = settings.weightFactor(weight);\n      if (fontSize <= settings.minSize) {\n        return false;\n      }\n\n      // Scale factor here is to make sure fillText is not limited by\n      // the minium font size set by browser.\n      // It will always be 1 or 2n.\n      var mu = 1;\n      if (fontSize < minFontSize) {\n        mu = (function calculateScaleFactor() {\n          var mu = 2;\n          while (mu * fontSize < minFontSize) {\n            mu += 2;\n          }\n          return mu;\n        })();\n      }\n\n      var fcanvas = document.createElement('canvas');\n      var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Estimate the dimension of the text with measureText().\n      var fw = fctx.measureText(word).width / mu;\n      var fh = Math.max(fontSize * mu,\n                        fctx.measureText('m').width,\n                        fctx.measureText('\\uFF37').width) / mu;\n\n      // Create a boundary box that is larger than our estimates,\n      // so text don't get cut of (it sill might)\n      var boxWidth = fw + fh * 2;\n      var boxHeight = fh * 3;\n      var fgw = Math.ceil(boxWidth / g);\n      var fgh = Math.ceil(boxHeight / g);\n      boxWidth = fgw * g;\n      boxHeight = fgh * g;\n\n      // Calculate the proper offsets to make the text centered at\n      // the preferred position.\n\n      // This is simply half of the width.\n      var fillTextOffsetX = - fw / 2;\n      // Instead of moving the box to the exact middle of the preferred\n      // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n      // vertical centered.\n      var fillTextOffsetY = - fh * 0.4;\n\n      // Calculate the actual dimension of the canvas, considering the rotation.\n      var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) +\n                           boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n      var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) +\n                           boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n      var width = cgw * g;\n      var height = cgh * g;\n\n      fcanvas.setAttribute('width', width);\n      fcanvas.setAttribute('height', height);\n\n      if (debug) {\n        // Attach fcanvas to the DOM\n        document.body.appendChild(fcanvas);\n        // Save it's state so that we could restore and draw the grid correctly.\n        fctx.save();\n      }\n\n      // Scale the canvas with |mu|.\n      fctx.scale(1 / mu, 1 / mu);\n      fctx.translate(width * mu / 2, height * mu / 2);\n      fctx.rotate(- rotateDeg);\n\n      // Once the width/height is set, ctx info will be reset.\n      // Set it again here.\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Fill the text into the fcanvas.\n      // XXX: We cannot because textBaseline = 'top' here because\n      // Firefox and Chrome uses different default line-height for canvas.\n      // Please read https://bugzil.la/737852#c6.\n      // Here, we use textBaseline = 'middle' and draw the text at exactly\n      // 0.5 * fontSize lower.\n      fctx.fillStyle = '#000';\n      fctx.textBaseline = 'middle';\n      fctx.fillText(word, fillTextOffsetX * mu,\n                    (fillTextOffsetY + fontSize * 0.5) * mu);\n\n      // Get the pixels of the text\n      var imageData = fctx.getImageData(0, 0, width, height).data;\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      if (debug) {\n        // Draw the box of the original estimation\n        fctx.strokeRect(fillTextOffsetX * mu,\n                        fillTextOffsetY, fw * mu, fh * mu);\n        fctx.restore();\n      }\n\n      // Read the pixels and save the information to the occupied array\n      var occupied = [];\n      var gx = cgw, gy, x, y;\n      var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n      while (gx--) {\n        gy = cgh;\n        while (gy--) {\n          y = g;\n          singleGridLoop: {\n            while (y--) {\n              x = g;\n              while (x--) {\n                if (imageData[((gy * g + y) * width +\n                               (gx * g + x)) * 4 + 3]) {\n                  occupied.push([gx, gy]);\n\n                  if (gx < bounds[3]) {\n                    bounds[3] = gx;\n                  }\n                  if (gx > bounds[1]) {\n                    bounds[1] = gx;\n                  }\n                  if (gy < bounds[0]) {\n                    bounds[0] = gy;\n                  }\n                  if (gy > bounds[2]) {\n                    bounds[2] = gy;\n                  }\n\n                  if (debug) {\n                    fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                    fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                  }\n                  break singleGridLoop;\n                }\n              }\n            }\n            if (debug) {\n              fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n              fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n            }\n          }\n        }\n      }\n\n      if (debug) {\n        fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n        fctx.fillRect(bounds[3] * g,\n                      bounds[0] * g,\n                      (bounds[1] - bounds[3] + 1) * g,\n                      (bounds[2] - bounds[0] + 1) * g);\n      }\n\n      // Return information needed to create the text on the real canvas\n      return {\n        mu: mu,\n        occupied: occupied,\n        bounds: bounds,\n        gw: cgw,\n        gh: cgh,\n        fillTextOffsetX: fillTextOffsetX,\n        fillTextOffsetY: fillTextOffsetY,\n        fillTextWidth: fw,\n        fillTextHeight: fh,\n        fontSize: fontSize\n      };\n    };\n\n    /* Determine if there is room available in the given dimension */\n    var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n      // Go through the occupied points,\n      // return false if the space is not available.\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          if (!settings.drawOutOfBound) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!grid[px][py]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /* Actually draw the text on the grid */\n    var drawText = function drawText(gx, gy, info, word, weight,\n                                     distance, theta, rotateDeg, attributes) {\n\n      var fontSize = info.fontSize;\n      var color;\n      if (getTextColor) {\n        color = getTextColor(word, weight, fontSize, distance, theta);\n      } else {\n        color = settings.color;\n      }\n\n      var classes;\n      if (getTextClasses) {\n        classes = getTextClasses(word, weight, fontSize, distance, theta);\n      } else {\n        classes = settings.classes;\n      }\n\n      var dimension;\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n\n      elements.forEach(function(el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          var mu = info.mu;\n\n          // Save the current state before messing it\n          ctx.save();\n          ctx.scale(1 / mu, 1 / mu);\n\n          ctx.font = settings.fontWeight + ' ' +\n                     (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n          ctx.fillStyle = color;\n\n          // Translate the canvas position to the origin coordinate of where\n          // the text should be put.\n          ctx.translate((gx + info.gw / 2) * g * mu,\n                        (gy + info.gh / 2) * g * mu);\n\n          if (rotateDeg !== 0) {\n            ctx.rotate(- rotateDeg);\n          }\n\n          // Finally, fill the text.\n\n          // XXX: We cannot because textBaseline = 'top' here because\n          // Firefox and Chrome uses different default line-height for canvas.\n          // Please read https://bugzil.la/737852#c6.\n          // Here, we use textBaseline = 'middle' and draw the text at exactly\n          // 0.5 * fontSize lower.\n          ctx.textBaseline = 'middle';\n          ctx.fillText(word, info.fillTextOffsetX * mu,\n                             (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n          // The below box is always matches how <span>s are positioned\n          /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n          // Restore the state.\n          ctx.restore();\n        } else {\n          // drawText on DIV element\n          var span = document.createElement('span');\n          var transformRule = '';\n          transformRule = 'rotate(' + (- rotateDeg / Math.PI * 180) + 'deg) ';\n          if (info.mu !== 1) {\n            transformRule +=\n              'translateX(-' + (info.fillTextWidth / 4) + 'px) ' +\n              'scale(' + (1 / info.mu) + ')';\n          }\n          var styleRules = {\n            'position': 'absolute',\n            'display': 'block',\n            'font': settings.fontWeight + ' ' +\n                    (fontSize * info.mu) + 'px ' + settings.fontFamily,\n            'left': ((gx + info.gw / 2) * g + info.fillTextOffsetX) + 'px',\n            'top': ((gy + info.gh / 2) * g + info.fillTextOffsetY) + 'px',\n            'width': info.fillTextWidth + 'px',\n            'height': info.fillTextHeight + 'px',\n            'lineHeight': fontSize + 'px',\n            'whiteSpace': 'nowrap',\n            'transform': transformRule,\n            'webkitTransform': transformRule,\n            'msTransform': transformRule,\n            'transformOrigin': '50% 40%',\n            'webkitTransformOrigin': '50% 40%',\n            'msTransformOrigin': '50% 40%'\n          };\n          if (color) {\n            styleRules.color = color;\n          }\n          span.textContent = word;\n          for (var cssProp in styleRules) {\n            span.style[cssProp] = styleRules[cssProp];\n          }\n          if (attributes) {\n            for (var attribute in attributes) {\n              span.setAttribute(attribute, attributes[attribute]);\n            }\n          }\n          if (classes) {\n            span.className += classes;\n          }\n          el.appendChild(span);\n        }\n      });\n    };\n\n    /* Help function to updateGrid */\n    var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n      if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n        return;\n      }\n\n      grid[x][y] = false;\n\n      if (drawMask) {\n        var ctx = elements[0].getContext('2d');\n        ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n      }\n\n      if (interactive) {\n        infoGrid[x][y] = { item: item, dimension: dimension };\n      }\n    };\n\n    /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n    var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n      var occupied = info.occupied;\n      var drawMask = settings.drawMask;\n      var ctx;\n      if (drawMask) {\n        ctx = elements[0].getContext('2d');\n        ctx.save();\n        ctx.fillStyle = settings.maskColor;\n      }\n\n      var dimension;\n      if (interactive) {\n        var bounds = info.bounds;\n        dimension = {\n          x: (gx + bounds[3]) * g,\n          y: (gy + bounds[0]) * g,\n          w: (bounds[1] - bounds[3] + 1) * g,\n          h: (bounds[2] - bounds[0] + 1) * g\n        };\n      }\n\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          continue;\n        }\n\n        fillGridAt(px, py, drawMask, dimension, item);\n      }\n\n      if (drawMask) {\n        ctx.restore();\n      }\n    };\n\n    /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n    var putWord = function putWord(item) {\n      var word, weight, attributes;\n      if (Array.isArray(item)) {\n        word = item[0];\n        weight = item[1];\n      } else {\n        word = item.word;\n        weight = item.weight;\n        attributes = item.attributes;\n      }\n      var rotateDeg = getRotateDeg();\n\n      // get info needed to put the text onto the canvas\n      var info = getTextInfo(word, weight, rotateDeg);\n\n      // not getting the info means we shouldn't be drawing this one.\n      if (!info) {\n        return false;\n      }\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      // If drawOutOfBound is set to false,\n      // skip the loop if we have already know the bounding box of\n      // word is larger than the canvas.\n      if (!settings.drawOutOfBound) {\n        var bounds = info.bounds;\n        if ((bounds[1] - bounds[3] + 1) > ngx ||\n          (bounds[2] - bounds[0] + 1) > ngy) {\n          return false;\n        }\n      }\n\n      // Determine the position to put the text by\n      // start looking for the nearest points\n      var r = maxRadius + 1;\n\n      var tryToPutWordAtPoint = function(gxy) {\n        var gx = Math.floor(gxy[0] - info.gw / 2);\n        var gy = Math.floor(gxy[1] - info.gh / 2);\n        var gw = info.gw;\n        var gh = info.gh;\n\n        // If we cannot fit the text at this position, return false\n        // and go to the next position.\n        if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n          return false;\n        }\n\n        // Actually put the text on the canvas\n        drawText(gx, gy, info, word, weight,\n                 (maxRadius - r), gxy[2], rotateDeg, attributes);\n\n        // Mark the spaces on the grid as filled\n        updateGrid(gx, gy, gw, gh, info, item);\n\n        return {\n          gx: gx,\n          gy: gy,\n          rot: rotateDeg,\n          info: info\n        };\n      };\n\n      while (r--) {\n        var points = getPointsAtRadius(maxRadius - r);\n\n        if (settings.shuffle) {\n          points = [].concat(points);\n          shuffleArray(points);\n        }\n\n        // Try to fit the words by looking at each point.\n        // array.some() will stop and return true\n        // when putWordAtPoint() returns true.\n        for (var i = 0; i < points.length; i++) {\n          var res = tryToPutWordAtPoint(points[i]);\n          if (res) {\n            return res;\n          }\n        }\n\n        // var drawn = points.some(tryToPutWordAtPoint);\n        // if (drawn) {\n        //   // leave putWord() and return true\n        //   return true;\n        // }\n      }\n      // we tried all distances but text won't fit, return null\n      return null;\n    };\n\n    /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n    var sendEvent = function sendEvent(type, cancelable, detail) {\n      if (cancelable) {\n        return !elements.some(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          return !el.dispatchEvent(evt);\n        }, this);\n      } else {\n        elements.forEach(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          el.dispatchEvent(evt);\n        }, this);\n      }\n    };\n\n    /* Start drawing on a canvas */\n    var start = function start() {\n      // For dimensions, clearCanvas etc.,\n      // we only care about the first element.\n      var canvas = elements[0];\n\n      if (canvas.getContext) {\n        ngx = Math.ceil(canvas.width / g);\n        ngy = Math.ceil(canvas.height / g);\n      } else {\n        var rect = canvas.getBoundingClientRect();\n        ngx = Math.ceil(rect.width / g);\n        ngy = Math.ceil(rect.height / g);\n      }\n\n      // Sending a wordcloudstart event which cause the previous loop to stop.\n      // Do nothing if the event is canceled.\n      if (!sendEvent('wordcloudstart', true)) {\n        return;\n      }\n\n      // Determine the center of the word cloud\n      center = (settings.origin) ?\n        [settings.origin[0]/g, settings.origin[1]/g] :\n        [ngx / 2, ngy / 2];\n\n      // Maxium radius to look for space\n      maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n      /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n      grid = [];\n\n      var gx, gy, i;\n      if (!canvas.getContext || settings.clearCanvas) {\n        elements.forEach(function(el) {\n          if (el.getContext) {\n            var ctx = el.getContext('2d');\n            ctx.fillStyle = settings.backgroundColor;\n            ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n            ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          } else {\n            el.textContent = '';\n            el.style.backgroundColor = settings.backgroundColor;\n            el.style.position = 'relative';\n          }\n        });\n\n        /* fill the grid with empty state */\n        gx = ngx;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            grid[gx][gy] = true;\n          }\n        }\n      } else {\n        /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n        var bctx = document.createElement('canvas').getContext('2d');\n\n        bctx.fillStyle = settings.backgroundColor;\n        bctx.fillRect(0, 0, 1, 1);\n        var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n        /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n        var imageData =\n          canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n\n        gx = ngx;\n        var x, y;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            y = g;\n            singleGridLoop: while (y--) {\n              x = g;\n              while (x--) {\n                i = 4;\n                while (i--) {\n                  if (imageData[((gy * g + y) * ngx * g +\n                                 (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                    grid[gx][gy] = false;\n                    break singleGridLoop;\n                  }\n                }\n              }\n            }\n            if (grid[gx][gy] !== false) {\n              grid[gx][gy] = true;\n            }\n          }\n        }\n\n        imageData = bctx = bgPixel = undefined;\n      }\n\n      // fill the infoGrid with empty state if we need it\n      if (settings.hover || settings.click) {\n\n        interactive = true;\n\n        /* fill the grid with empty state */\n        gx = ngx + 1;\n        while (gx--) {\n          infoGrid[gx] = [];\n        }\n\n        if (settings.hover) {\n          canvas.addEventListener('mousemove', wordcloudhover);\n        }\n\n        if (settings.click) {\n          canvas.addEventListener('click', wordcloudclick);\n          canvas.addEventListener('touchstart', wordcloudclick);\n          canvas.addEventListener('touchend', function (e) {\n            e.preventDefault();\n          });\n          canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n        }\n\n        canvas.addEventListener('wordcloudstart', function stopInteraction() {\n          canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n          canvas.removeEventListener('mousemove', wordcloudhover);\n          canvas.removeEventListener('click', wordcloudclick);\n          hovered = undefined;\n        });\n      }\n\n      i = 0;\n      var loopingFunction, stoppingFunction;\n      if (settings.wait !== 0) {\n        loopingFunction = window.setTimeout;\n        stoppingFunction = window.clearTimeout;\n      } else {\n        loopingFunction = window.setImmediate;\n        stoppingFunction = window.clearImmediate;\n      }\n\n      var addEventListener = function addEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.addEventListener(type, listener);\n        }, this);\n      };\n\n      var removeEventListener = function removeEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.removeEventListener(type, listener);\n        }, this);\n      };\n\n      var anotherWordCloudStart = function anotherWordCloudStart() {\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        stoppingFunction(timer);\n      };\n\n      addEventListener('wordcloudstart', anotherWordCloudStart);\n\n      var timer = loopingFunction(function loop() {\n        if (i >= settings.list.length) {\n          stoppingFunction(timer);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n\n          return;\n        }\n        escapeTime = (new Date()).getTime();\n        var drawn = putWord(settings.list[i]);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i], drawn: drawn });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer = loopingFunction(loop, settings.wait);\n      }, settings.wait);\n    };\n\n    // All set, start the drawing\n    start();\n  };\n\n  WordCloud.isSupported = isSupported;\n  WordCloud.minFontSize = minFontSize;\n\n  // Expose the library as an AMD module\n  if (typeof define === 'function' && define.amd) {\n    define('wordcloud', [], function() { return WordCloud; });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = WordCloud;\n  } else {\n    global.WordCloud = WordCloud;\n  }\n\n})(this); //jshint ignore:line", "var echarts = require('echarts/lib/echarts');\nvar layoutUtil = require('echarts/lib/util/layout');\n\nrequire('./WordCloudSeries');\nrequire('./WordCloudView');\n\nvar wordCloudLayoutHelper = require('./layout');\n\nif (!wordCloudLayoutHelper.isSupported) {\n    throw new Error('Sorry your browser not support wordCloud');\n}\n\n// https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\nfunction updateCanvasMask(maskCanvas) {\n    var ctx = maskCanvas.getContext('2d');\n    var imageData = ctx.getImageData(\n        0, 0, maskCanvas.width, maskCanvas.height);\n    var newImageData = ctx.createImageData(imageData);\n\n    var toneSum = 0;\n    var toneCnt = 0;\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var alpha = imageData.data[i + 3];\n        if (alpha > 128) {\n            var tone = imageData.data[i]\n                + imageData.data[i + 1]\n                + imageData.data[i + 2];\n            toneSum += tone;\n            ++toneCnt;\n        }\n    }\n    var threshold = toneSum / toneCnt;\n\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var tone = imageData.data[i]\n            + imageData.data[i + 1]\n            + imageData.data[i + 2];\n        var alpha = imageData.data[i + 3];\n\n        if (alpha < 128 || tone > threshold) {\n            // Area not to draw\n            newImageData.data[i] = 0;\n            newImageData.data[i + 1] = 0;\n            newImageData.data[i + 2] = 0;\n            newImageData.data[i + 3] = 0;\n        }\n        else {\n            // Area to draw\n            // The color must be same with backgroundColor\n            newImageData.data[i] = 255;\n            newImageData.data[i + 1] = 255;\n            newImageData.data[i + 2] = 255;\n            newImageData.data[i + 3] = 255;\n        }\n    }\n\n    ctx.putImageData(newImageData, 0, 0);\n}\n\necharts.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\n        var gridRect = layoutUtil.getLayoutRect(\n            seriesModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            }\n        );\n        var data = seriesModel.getData();\n\n        var canvas = document.createElement('canvas');\n        canvas.width = gridRect.width;\n        canvas.height = gridRect.height;\n\n        var ctx = canvas.getContext('2d');\n        var maskImage = seriesModel.get('maskImage');\n        if (maskImage) {\n            try {\n                ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\n                updateCanvasMask(canvas);\n            }\n            catch (e) {\n                console.error('Invalid mask image');\n                console.error(e.toString());\n            }\n        }\n\n        var sizeRange = seriesModel.get('sizeRange');\n        var rotationRange = seriesModel.get('rotationRange');\n        var valueExtent = data.getDataExtent('value');\n\n        var DEGREE_TO_RAD = Math.PI / 180;\n        var gridSize = seriesModel.get('gridSize');\n        wordCloudLayoutHelper(canvas, {\n            list: data.mapArray('value', function (value, idx) {\n                var itemModel = data.getItemModel(idx);\n                return [\n                    data.getName(idx),\n                    itemModel.get('textStyle.normal.textSize', true)\n                        || echarts.number.linearMap(value, valueExtent, sizeRange),\n                    idx\n                ];\n            }).sort(function (a, b) {\n                // Sort from large to small in case there is no more room for more words\n                return b[1] - a[1];\n            }),\n            fontFamily: seriesModel.get('textStyle.normal.fontFamily')\n                || seriesModel.get('textStyle.emphasis.fontFamily')\n                || ecModel.get('textStyle.fontFamily'),\n            fontWeight: seriesModel.get('textStyle.normal.fontWeight')\n                || seriesModel.get('textStyle.emphasis.fontWeight')\n                || ecModel.get('textStyle.fontWeight'),\n            gridSize: gridSize,\n\n            ellipticity: gridRect.height / gridRect.width,\n\n            minRotation: rotationRange[0] * DEGREE_TO_RAD,\n            maxRotation: rotationRange[1] * DEGREE_TO_RAD,\n\n            clearCanvas: !maskImage,\n\n            rotateRatio: 1,\n\n            rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\n\n            drawOutOfBound: seriesModel.get('drawOutOfBound'),\n\n            shuffle: false,\n\n            shape: seriesModel.get('shape')\n        });\n\n        function onWordCloudDrawn(e) {\n            var item = e.detail.item;\n            if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\n                e.detail.drawn.gx += gridRect.x / gridSize;\n                e.detail.drawn.gy += gridRect.y / gridSize;\n                seriesModel.layoutInstance.ondraw(\n                    item[0], item[1], item[2], e.detail.drawn\n                );\n            }\n        }\n\n        canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\n\n        if (seriesModel.layoutInstance) {\n            // Dispose previous\n            seriesModel.layoutInstance.dispose();\n        }\n\n        seriesModel.layoutInstance = {\n            ondraw: null,\n\n            dispose: function () {\n                canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn);\n                // Abort\n                canvas.addEventListener('wordclouddrawn', function (e) {\n                    // Prevent default to cancle the event and stop the loop\n                    e.preventDefault();\n                });\n            }\n        };\n    });\n});\n\necharts.registerPreprocessor(function (option) {\n    var series = (option || {}).series;\n    !echarts.util.isArray(series) && (series = series ? [series] : []);\n\n    var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n\n    echarts.util.each(series, function (seriesItem) {\n        if (seriesItem && seriesItem.type === 'wordCloud') {\n            var textStyle = seriesItem.textStyle || {};\n\n            compatTextStyle(textStyle.normal);\n            compatTextStyle(textStyle.emphasis);\n        }\n    });\n\n    function compatTextStyle(textStyle) {\n        textStyle && echarts.util.each(compats, function (key) {\n            if (textStyle.hasOwnProperty(key)) {\n                textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\n            }\n        });\n    }\n});\n", "module.exports = require('./src/wordCloud');", "export default require(\"../node_modules/echarts-wordcloud/index.js\");"],
  "mappings": "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",
  "names": ["require_layout", "setZeroTimeout", "isSupported", "shuffleArray", "WordCloud", "getInfoGridFromMouseTouchEvent", "wordcloudhover", "wordcloudclick", "getPointsAtRadius", "exceedTime", "getRotateDeg", "getTextInfo", "mu", "canFitText", "drawText", "fillGridAt", "updateGrid", "putWord", "sendEvent", "start", "addEventListener", "removeEventListener", "anotherWordCloudStart"]
}
